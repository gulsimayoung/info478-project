odds_exposed_7 <- 8 / 10
odds_unexposed_7 <- (2545 - 8) / (629 - 10)
study_7 <- odds_exposed_7 / odds_unexposed_7
study_7_rr <- (8 / (8 + 2537)) / (10 / (10 + 619))
odds_exposed_8 <- 505 / 499
odds_unexposed_8 <- (88391 - 505) / (88391 - 499)
study_8 <- odds_exposed_8 / odds_unexposed_8
study_8_rr <- (505 / (505 + 87886)) / (499 / (499 + 87892))
odds_exposed_9 <- 29 / 45
odds_unexposed_9 <- (7499 - 29) / (7277 - 45)
study_9 <- odds_exposed_9 / odds_unexposed_9
study_9_rr <- (29 / (29 + 7470)) / (45 / (45 + 7232))
odds_exposed_10 <- 17 / 65
odds_unexposed_10 <- (1716 - 17) / (1665 - 65)
study_10 <- odds_exposed_10 / odds_unexposed_10
study_10_rr <- (17 / (17 + 1699)) / (65 / (65 + 1600))
odds_exposed_11 <- 186 / 141
odds_unexposed_11 <- (50634 - 186) / (27338 - 141)
study_11 <- odds_exposed_11 / odds_unexposed_11
study_11_rr <- (186 / (186 + 50448)) / (141 / (141 + 27197))
odds_exposed_12 <- 5 / 3
odds_unexposed_12 <- (2498 - 5) / (2341 - 3)
study_12 <- odds_exposed_12 / odds_unexposed_12
study_12_rr <- (5 / (5 + 2493)) / (3 / (3 + 2338))
odds_exposed_13 <- 27 / 29
odds_unexposed_13 <- (16913 - 27) / (17854 - 29)
study_13 <- odds_exposed_13 / odds_unexposed_13
study_13_rr <- (27 / (27 + 16886)) / (29 / (29 + 17825))
titles <- c("Study 1", "Study 2", "Study 3", "Study 4", "Study 5", "Study 6", "Study 7",
"Study 8", "Study 8", "Study 10", "Study 11", "Study 12", "Study 13")
odds_ratio <- c(study_1, study_2, study_3, study_4, study_5, study_6, study_7, study_8,
study_9, study_10, study_11, study_12, study_13)
latitudes <- c(44, 55, 42, 52, 13, 44, 19, 13, 27, 42, 18, 33, 33)
years <- c(1948, 1949, 1960, 1977, 1973, 1953, 1973, 1980, 1968, 1961, 1974, 1969, 1976)
relative_risks <- c(study_1_rr, study_2_rr, study_3_rr, study_4_rr, study_5_rr, study_6_rr,
study_7_rr, study_8_rr, study_9_rr, study_10_rr, study_11_rr, study_12_rr, study_13_rr)
tb_df <- data.frame(titles, odds_ratio, latitudes, years, relative_risks)
# LOW BIRTH WEIGHT
prop_lbw <- sum(low_birth_weight$low) / nrow(low_birth_weight)
prop_smokers <-sum(low_birth_weight$smoke) / nrow(low_birth_weight)
mean_birth_weight <- mean(low_birth_weight$bwt)
mean_physician_visits <- mean(low_birth_weight$ftv)
mean_age <- mean(low_birth_weight$age)
lbw_initial_df <- data.frame(low = low_birth_weight$low, age = low_birth_weight$age, lwt = low_birth_weight$lwt,
race = low_birth_weight$race, smoke = low_birth_weight$smoke, ptl= low_birth_weight$ptl,
ht = low_birth_weight$ht, ui = low_birth_weight$ui, ftv = low_birth_weight$ftv,
bwt = low_birth_weight$bwt)
lbw_initial_df <- lbw_initial_df %>%
mutate(zero_visits = case_when(
ftv == 0 ~ "1",
ftv > 0 ~ "0"
))
lbw_initial_df <- lbw_initial_df %>%
mutate(before_20 = case_when(
age < 20 ~ "1",
age >= 20 ~ "0"
))
# Because you'll be performing the same calculation repeated times (in the next step), you should write an R function
# that allows you to specify a data frame and a column, and calculates the relative risk of the outcome variable (low)
# based on a binary input variable.
#                 YES     NO
# EXPOSED
# NOT EXPOSED
find_rr <- function(data_frame, column) {
a <- sum(data_frame$low == 1, data_frame$column == 1)
b <- sum(data_frame$low == 1, data_frame$column == 0)
c <- sum(data_frame$low == 0, data_frame$column == 1)
d <- sum(data_frame$low == 0, data_frame$column == 0)
top_value <- a / (a + b)
bottom_value <- c / (c + d)
rr_value <- top_value / bottom_value
return(rr_value)
}
# Calculate the following relative risk of having a low-birth weight infant using your function (you may need to create
# new columns of your data frame to do so). Show these computed values in a well formatted table or visualization of your
# choice.
#   - Smoking status
smoking_status_rr <- find_rr(lbw_initial_df, smoke)
#   - Hypertension status
hypertension_status_rr <- find_rr(lbw_initial_df, ht)
#   - Attending 0 prenatal care visits
zero_visits_rr <- find_rr(lbw_initial_df, zero_visits)
#   - Giving birth before age 20
before_20_rr <- find_rr(lbw_initial_df, before_20)
titles <- c("Smoking Status", "Hypertension Status", "Zero Visits",
"Before 20")
values <- c(smoking_status_rr, hypertension_status_rr, zero_visits_rr,
before_20_rr)
lbw_df <- data.frame(titles, values)
# What conclusions can you draw from your analysis?
# ENDOMETRIAL CANCER
# Using the epitab function, calculate the odds ratio of having Endometrial cancer based on each of the following factors,
# and provide an interpretation of your results:
#   - Hypertension status
#   - Presence of Gall bladder disease
#   - Obesity
View(lbw_initial_df)
View(lbw_df)
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
mod <- dcm(param, init, control)
require(EpiModel)
require(dcm)
my_server <- function() {
########### SIR model
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
library(shiny)
library(shinythemes)
library(tidyverse)
library(ggplot2)
library(plotly)
source("app_server.R")
source("app_ui.R")
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
require(EpiModel)
require(dcm)
########### SIR model
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
param.dcm <- param.dcm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
init.dcm <- init.dcm(s.num = 1000000, i.num = 1, r.num = 0)
control.dcm <- control.dcm(type = "SIR", nsims = 10, nsteps = 300)
mod.dcm <- dcm(param.dcm, init.dcm, control.dcm)
plot(mod.dcm)
param.icm <- param.icm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
init.icm <- init.icm(s.num = 1000000, i.num = 1, r.num = 0)
control.icm <- control.icm(type = "SIR", nsims = 100, nsteps = 300)
mod.icm <- icm(param.icm, init.icm, control.icm)
plot(mod.icm)
plot(mod.dcm, alpha = 0.75, lwd = 4, main = "DCM and ICM Comparison")
plot(mod.icm, qnts = FALSE, sim.lines = FALSE, add = TRUE, mean.lty = 2, legend = FALSE)
dev.off()
require(EpiModel)
require(dcm)
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
require(EpiModel)
require(dcm)
########### SIR model
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
#################################################################################
#### Individual contact models (and comparison to DCM)
#################################################################################
param.dcm <- param.dcm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
init.dcm <- init.dcm(s.num = 1000000, i.num = 1, r.num = 0)
control.dcm <- control.dcm(type = "SIR", nsims = 10, nsteps = 300)
mod.dcm <- dcm(param.dcm, init.dcm, control.dcm)
plot(mod.dcm)
param.icm <- param.icm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
init.icm <- init.icm(s.num = 1000000, i.num = 1, r.num = 0)
control.icm <- control.icm(type = "SIR", nsims = 100, nsteps = 300)
mod.icm <- icm(param.icm, init.icm, control.icm)
plot(mod.icm)
plot(mod.dcm, alpha = 0.75, lwd = 4, main = "DCM and ICM Comparison")
plot(mod.icm, qnts = FALSE, sim.lines = FALSE, add = TRUE, mean.lty = 2, legend = FALSE)
dev.off()
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
shiny::runApp('a4-gulsimayoung')
setwd("~/a4-gulsimayoung")
shiny::runApp('info478/assignment-3-gulsimayoung')
require(EpiModel)
require(dcm)
########### SIR model
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
#################################################################################
#### Individual contact models (and comparison to DCM)
#################################################################################
param.dcm <- param.dcm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
init.dcm <- init.dcm(s.num = 1000000, i.num = 1, r.num = 0)
control.dcm <- control.dcm(type = "SIR", nsims = 10, nsteps = 300)
mod.dcm <- dcm(param.dcm, init.dcm, control.dcm)
plot(mod.dcm)
param.icm <- param.icm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
init.icm <- init.icm(s.num = 1000000, i.num = 1, r.num = 0)
control.icm <- control.icm(type = "SIR", nsims = 100, nsteps = 300)
mod.icm <- icm(param.icm, init.icm, control.icm)
plot(mod.icm)
plot(mod.dcm, alpha = 0.75, lwd = 4, main = "DCM and ICM Comparison")
plot(mod.icm, qnts = FALSE, sim.lines = FALSE, add = TRUE, mean.lty = 2, legend = FALSE)
dev.off()
page_one <- tabPanel(
"Home",
titlePanel(""),
br(),
h2("Introduction"),
br(),
h5("Introduction description")
)
page_two <- tabPanel(
"Deterministic Model"
)
page_three <- tabPanel(
"Stochastic Model"
)
page_four <- tabPanel(
"Interpretation"
)
my_ui <- navbarPage(theme = shinytheme("cyborg"),
"Modeling the Spread and Prevention of COVID-19",
page_one,
page_two,
page_three,
page_four
)
shiny::runApp('info478/assignment-3-gulsimayoung')
shiny::runApp('info478/assignment-3-gulsimayoung')
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
#################################################################################
#### Individual contact models (and comparison to DCM)
#################################################################################
param.dcm <- param.dcm(inf.prob = c(0.00026069), act.rate = 0.000107, rec.rate = 0.97)
View(mod)
View(param)
param <- param.dcm(inf.prob = 0.00026069, act.rate = 0.000107, rec.rate = 0.97)
init <- init.dcm(s.num = 1000000, i.num = 107, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
param <- param.dcm(inf.prob = 0.3, act.rate = 0.1, rec.rate = 0.005)
init <- init.dcm(s.num = 999, i.num = 4,r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
plot(mod)
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
mod
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", legend = "n")
par(mfrow = c(1, 1))
comp_plot(mod, at = 2, digits = 1)
shiny::runApp('info478/assignment-3-gulsimayoung')
runApp('info478/assignment-3-gulsimayoung')
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='gulsimayoung',
token='3EBD9314D076F30EECDF40A5474DC03D',
secret='<SECRET>')
library(name_UI <- function(id) {
ns <- NS(id)
tagList(
)
}
name <- function(input, output, session) {
})
run(app)
runApp()
library(rsconnect)
deployApp()
setwd("~/info478-project")
shiny::runApp()
unique_countries <- unique(GHED_data$country)
runApp()
View GHED_data
View(GHED_data)
View(unique_countries)
runApp()
# Final Deliverable UI
library(shiny)
library(plotly)
page_one <- tabPanel(
"Introduction"
)
page_two <- tabPanel(
"Health Expenditure",
sidebarLayout(
sidebarPanel(
h6("Choose two countries and a year below to compare their CHE%GDP."),
selectInput(
inputId = "country_1",
label = "Country 1:",
choices = c(unique_countries)
),
selectInput(
inputId = "country_2",
label = "Country 2:",
choices = c(unique_countries)
),
sliderInput(
inputId = "year",
label = "Year",
min = 2000,
max = 2018,
value = 2000
)
),
mainPanel(
plotlyOutput("chart"),
br(),
h6("The CHE%GDP metric stands for Current Health Expenditure (CHE) as percentage
of Gross Domestic Product (GDP) (%). This is often referred to as the CHE%GDP.
The CHE value explains how much a country is spending on health-related expenditures.
When we measure this as a percent of a country’s overall GDP, we are able to learn
how much money the country is actively allocating towards health related funding
and costs. Overall, this gives us a sense of how various countries prioritize
public health."),
br()
)
),
# h4("Comparing current health expenditures per capita in USD")
sidebarLayout(
sidebarPanel(
h6("Choose a countries and a start year below to evaluate its health expenditures per capita over time."),
selectInput(
inputId = "country_3",
label = "Country 1:",
choices = c(unique_countries)
),
sliderInput(
inputId = "year_2",
label = "Year:",
min = 2000,
max = 2018,
value = 2000
)
),
mainPanel(
plotlyOutput("chart2"),
br(),
h6("To evaluate current health expenditures per capita in USD, we used the che_pc_usd value from the Global
Health Expenditure Database. This gives us an idea of how much money the selected country theoretically
has to spend on each individual residing there. Since it is calculated in USD, it makes it easy for us
to compare the rates for each country, and also to understand each rate in a way that is familiar to us.
This graph shows how the expenditures per capita in in various countries has shifted over time. We can utilize
this information in order to ask further questions about the priorities and financial wellbeing of each
country."),
br()
)
),
sidebarLayout(
sidebarPanel(
h6("Choose a country and a start year below to analyze the CHE%GDP and CHE per capita over time."),
selectInput(
inputId = "country_4",
label = "Country:",
choices = c(unique_countries)
),
sliderInput(
inputId = "year_3",
label = "Year",
min = 2000,
max = 2018,
value = 2000
)
),
mainPanel(
plotlyOutput("chart"),
br(),
h6("The comparison of these "),
br()
)
)
)
page_three <- tabPanel(
"Health Coverage"
)
page_four <- tabPanel(
"Resource Page"
)
ui <- navbarPage(theme = shinytheme("cyborg"),
"Health Insurance Coverage: A Global Analysis",
page_one,
page_two,
page_three,
page_four
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
