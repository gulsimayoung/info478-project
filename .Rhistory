max = 2018,
value = 2000
)
),
mainPanel(
plotlyOutput("chart2"),
br(),
h6("Chart description"),
br()
)
)
)
page_three <- tabPanel(
"Health Coverage"
)
page_four <- tabPanel(
"Resource Page"
)
ui <- navbarPage(theme = shinytheme("cyborg"),
"Health Insurance Coverage: A Global Analysis",
page_one,
page_two,
page_three,
page_four
)
runApp()
View(GHED_data)
# Final deliverable server
unique_countries <- unique(GHED_data$country)
server <- function(input, output) {
output$chart <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_1 | country == input$country_2) %>%
filter(year == input$year)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
geom_bar(stat='identity', fill = "cornflowerblue",
mapping = aes(x = country, y = che_gdp)) +
labs(
title = "Comparing CHE%GDP Between Countries",
subtitle = "",
x = "Country",
y = "CHE%GDP"
)
ggplotly(p)
})
output$chart2 <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_3 | country == input$country_4) %>%
filter(year == input$year)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_pc_usd, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
geom_smooth(mapping = aes(x = year, y = che_pc_usd,
color = country)) +
geom_smooth(mapping = aes(x = year, y = che_pc_usd,
color = country))
labs(
title = "Comparing Health Expenditures per Capita Between Countries",
subtitle = "",
x = "Year",
y = "Health Expenditure per Capita in USD",
color = "Country"
)
ggplotly(p)
})
}
runApp()
runApp()
runApp()
# Final deliverable server
unique_countries <- unique(GHED_data$country)
server <- function(input, output) {
output$chart <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_1 | country == input$country_2) %>%
filter(year == input$year)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
geom_bar(stat='identity', fill = "cornflowerblue",
mapping = aes(x = country, y = che_gdp)) +
labs(
title = "Comparing CHE%GDP Between Countries",
subtitle = "",
x = "Country",
y = "CHE%GDP"
)
ggplotly(p)
})
output$chart2 <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_3) %>%
filter(year == input$year)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, che_pc_usd, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
scale_x_continuous(limits = c(input$year_2, 2018)) +
geom_smooth(mapping = aes(x = year, y = che_gdp,
color = "CHE%GDP")) +
geom_smooth(mapping = aes(x = year, y = che_pc_usd,
color = "Health Expenditures per Capita"))
labs(
title = "Comparing Health Expenditures per Capita to CHE%GDP",
subtitle = "",
x = "Year",
y = "Health Expenditure per Capita in USD",
color = "Country"
)
ggplotly(p)
})
}
runApp()
runApp()
# Final deliverable server
unique_countries <- unique(GHED_data$country)
server <- function(input, output) {
output$chart <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_1 | country == input$country_2) %>%
filter(year == input$year)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
geom_bar(stat='identity', fill = "cornflowerblue",
mapping = aes(x = country, y = che_gdp)) +
labs(
title = "Comparing CHE%GDP Between Countries",
subtitle = "",
x = "Country",
y = "CHE%GDP"
)
ggplotly(p)
})
output$chart2 <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_3) %>%
filter(year == input$year_2)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, che_pc_usd, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
scale_x_continuous(limits = c(input$year_2, 2018)) +
geom_smooth(mapping = aes(x = year, y = che_gdp,
color = "CHE%GDP")) +
geom_smooth(mapping = aes(x = year, y = che_pc_usd,
color = "Health Expenditures per Capita"))
labs(
title = "Comparing Health Expenditures per Capita to CHE%GDP",
subtitle = "",
x = "Year",
y = "Health Expenditure per Capita in USD",
color = "Country"
)
ggplotly(p)
})
}
View(GHED_data_che_gdp)
# Final deliverable server
unique_countries <- unique(GHED_data$country)
server <- function(input, output) {
output$chart <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_1 | country == input$country_2) %>%
filter(year == input$year)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
geom_bar(stat='identity', fill = "cornflowerblue",
mapping = aes(x = country, y = che_gdp)) +
labs(
title = "Comparing CHE%GDP Between Countries",
subtitle = "",
x = "Country",
y = "CHE%GDP"
)
ggplotly(p)
})
output$chart2 <- renderPlotly({
country_data <- GHED_data %>%
filter(country == input$country_3) %>%
filter(year == input$year_2)
GHED_data_che_gdp <- country_data %>%
summarize(country, year, che_gdp, che_pc_usd, .groups = "drop")
p <- ggplot(GHED_data_che_gdp) +
# scale_x_continuous(limits = c(input$year_2, 2018)) +
geom_smooth(mapping = aes(x = year, y = che_gdp,
color = "CHE%GDP")) +
geom_smooth(mapping = aes(x = year, y = che_pc_usd,
color = "Health Expenditures per Capita"))
labs(
title = "Comparing Health Expenditures per Capita to CHE%GDP",
subtitle = "",
x = "Year",
y = "Health Expenditure per Capita in USD",
color = "Country"
)
ggplotly(p)
})
}
runApp()
runApp()
runApp()
runApp()
View(GHED_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("readxl")
library("shiny")
library("dplyr")
library("plotly")
library("shinythemes")
library(readxl)
library(tidyverse)
library(lintr)
source("app_ui.R")
source("app_server.R")
install.packages("tidyverse")
install.packages("lintr")
library("shiny")
library("dplyr")
library("plotly")
library("shinythemes")
library(readxl)
library(tidyverse)
library(lintr)
source("app_ui.R")
source("app_server.R")
runApp()
health_insurance_coverage <- read.csv("data/states.csv")
health_insurance_coverage <- rename(health_insurance_coverage,
uninsured_2010=Uninsured.Rate..2010.,
uninsured_2015=Uninsured.Rate..2015.,
uninsured_change=Uninsured.Rate.Change..2010.2015.,
avg_tax_2016=Average.Monthly.Tax.Credit..2016.,
expansion=State.Medicaid.Expansion..2016.)
source("~/Documents/INFO478/info478-project/app_ui.R")
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
uninsured_2010 <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2010, "%")))
uninsured_2015 <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2015, "%")))
health_insurance <- data.frame(State=health_insurance_coverage$State,
uninsured_2010, uninsured_2015) %>%
filter(State == "Alaska " | State == "California" | State == "Nevada" |
State == "Massachusetts" | State == "Iowa " | State == "Hawaii" |
State == "United States" | State == "Kentucky" | State == "Florida ") %>%
pivot_longer(
cols = starts_with("uninsured_"),
names_to = "Year",
values_to = "uninsured"
)
ggplot(data=health_insurance, aes(x=State, y=uninsured)) +
geom_col(aes(fill=Year), position=position_dodge(), width=0.9) +
labs(title="Uninsurance Rate by State, Compared Across Years", subtitle = "", y="Uninsurance Rate (%)") +
theme(axis.text.x = element_text(angle = 20)) +
scale_fill_discrete(labels = c('2010','2015'))
uninsured_2010 <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2010, "%")))
uninsured_2015 <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2015, "%")))
health_insurance <- data.frame(State=health_insurance_coverage$State,
uninsured_2010, uninsured_2015) %>%
filter(State == "Alaska " | State == "California" | State == "Nevada" |
State == "Massachusetts" | State == "Iowa " | State == "Hawaii" |
State == "United States" | State == "Kentucky" | State == "Florida ") %>%
pivot_longer(
cols = starts_with("uninsured_"),
names_to = "Year",
values_to = "uninsured"
)
ggplot(data=health_insurance, aes(x=State, y=uninsured)) +
geom_col(aes(fill=Year), position=position_dodge(), width=0.9) +
labs(title="Uninsurance Rate by State, Compared Across Years",
subtitle = "", y="Uninsurance Rate (%)") +
theme(axis.text.x = element_text(angle = 20)) +
scale_fill_discrete(labels = c('2010','2015'))
runApp()
# Final deliverable server
library(shiny)
library(plotly)
library(ggplot2)
runApp()
runApp()
library(stringr)
health_insurance_coverage$State <- str_trim(health_insurance_coverage$State)
View(health_insurance_coverage)
us_states <- health_insurance_coverage$State
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
health_insurance <- data.frame(State=health_insurance_coverage$State,
uninsured_2010, uninsured_2015)
View(health_insurance)
health_insurance <- data.frame(State=health_insurance_coverage$State,
uninsured_2010, uninsured_2015) %>%
#filter(State == input$state_1 | State == input$state_2
#| State == input$state_3 | State == input$state_4
#| State == "United States") %>%
pivot_longer(
cols = starts_with("uninsured_"),
names_to = "Year",
values_to = "uninsured"
)
View(health_insurance)
?str_extract
strtrim(c("abcdef", "abcdef", "abcdef"), c(1,5,10))
health_insurance$Year <- str_remove(health_insurance$Year, "uninsured_")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(health_insurance_coverage)
install.packages(usmap)
install.packages("usmap")
library(usmap)
medicaid <- health_insurance_coverage$expansion
uninsured_2015_stripped <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2015, "%")))
df <- data.frame(uninsured_2015_stripped, medicaid) %>%
filter(medicaid == "True" | medicaid == "False") %>%
group_by(medicaid) %>%
summarise(uninsured=mean(uninsured_2015_stripped))
View(df)
medicaid <- health_insurance_coverage$expansion
uninsured_2015_stripped <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2015, "%")))
df <- data.frame(uninsured_2015_stripped, medicaid) %>%
filter(medicaid == "True" | medicaid == "False")
View(df)
df <- health_insurance_coverage %>%
select(State, uninsured_2015, expansion)
df$uninsured_2015 <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2015, "%")))
df$State <- str_trim(df$State)
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
plot_usmap(data=df, values=uninsured_2015, regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
plot_usmap(data=df, values="uninsured_2015", regions = "states") +
scale_fill_continuous(low="white", high="blue", name="uninsurance") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
df$state <- str_trim(df$State)
plot_usmap(data=df, values="uninsured_2015", regions = "states") +
scale_fill_continuous(low="white", high="blue", name="uninsurance") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
df$State <- str_trim(df$State)
plot_usmap(data=df, values="uninsured_2015", regions = "States") +
scale_fill_continuous(low="white", high="blue", name="uninsurance") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
df$state <- str_trim(df$State)
plot_usmap(data=df, values="uninsured_2015", regions = "states") +
scale_fill_continuous(low="white", high="blue", name="uninsurance") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
plot_usmap(data=df, values="uninsured_2015", regions = "states") +
scale_fill_continuous(low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
?pattern
?scale_fill_continuous
plot_usmap(data=df, regions = "states") +
scale_fill_continuous(aes(unisured_2015), low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
plot_usmap(data=df, values = c("uninsured_2015", "medicaid"), regions = "states") +
scale_fill_continuous(aes(unisured_2015), low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
plot_usmap(data=df, values = "uninsured_2015", regions = "states") +
scale_fill_continuous(aes(unisured_2015), low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
plot_usmap(data=df, values = "uninsured_2015", regions = "states") +
scale_fill_continuous(low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
plot_usmap(data=df, values = "uninsured_2015", regions = "states", pattern_fill = "medicaid") +
scale_fill_continuous(low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
?pattern_fill
map2 <- plot_usmap(data=df, values = "medicaid", regions = "states") +
scale_fill_continuous(low="white", high="oragnge", name="Medicaid Expansion") +
theme(legend.position = "left")
map2 <- plot_usmap(data=df, values = "expansion", regions = "states") +
scale_fill_continuous(low="white", high="oragnge", name="Medicaid Expansion") +
theme(legend.position = "left")
map2 <- plot_usmap(data=df, values = "expansion", regions = "states") +
scale_fill_continuous(low="white", high="orange", name="Medicaid Expansion") +
theme(legend.position = "left")
plot_usmap(data=df, values = "expansion", regions = "states") +
scale_fill_continuous(low="white", high="orange", name="Medicaid Expansion") +
theme(legend.position = "left")
plot_usmap(data=df, values = "expansion", regions = "states") +
scale_fill_discrete(name="Medicaid Expansion") +
theme(legend.position = "left")
?scale_fill_discrete
plot3 <- data.frame(uninsured_2015_stripped, medicaid) %>%
filter(medicaid == "True" | medicaid == "False") %>%
group_by(medicaid) %>%
summarise(uninsured=mean(uninsured_2015_stripped))
ggplot(data=plot3, aes(x=uninsured, y=medicaid)) +
geom_col(fill="cornflowerblue", width=0.5) +
labs(title="Medicaid Expansion vs. Percent Uninsured",
y="Medicaid Expansion", x="Uninsured in 2015 (%)")
# map data cleaning
map_data <- health_insurance_coverage %>%
select(State, uninsured_2015, expansion) %>%
filter(medicaid == "True" | medicaid == "False")
map_data$uninsured_2015 <- as.numeric(str_trim(
str_remove(map_data$uninsured_2015, "%")))
map_data$state <- str_trim(map_data$State)
plot_usmap(data=map_data, values = "uninsured_2015", regions = "states") +
scale_fill_continuous(low="white", high="blue", name="Uninsurance Rate") +
theme(legend.position = "right") +
labs(title = "Uninsurance Map of U.S. States") +
theme(panel.background=element_blank())
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete(name="Medicaid Expansion") +
theme(legend.position = "right") +
labs(title = "Medicare Expansion") +
theme(panel.background=element_blank())
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete(color=c(white, blue), name="Medicaid Expansion") +
theme(legend.position = "right") +
labs(title = "Medicare Expansion") +
theme(panel.background=element_blank())
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete(color=c("white", "blue"), name="Medicaid Expansion") +
theme(legend.position = "right") +
labs(title = "Medicare Expansion") +
theme(panel.background=element_blank())
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete(values=c("white", "blue"), name="Medicaid Expansion") +
theme(legend.position = "right") +
labs(title = "Medicare Expansion") +
theme(panel.background=element_blank())
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete("blue", name="Medicaid Expansion") +
theme(legend.position = "right") +
labs(title = "Medicare Expansion") +
theme(panel.background=element_blank())
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete(name="Medicaid Expansion") +
theme(legend.position = "right") +
labs(title = "Medicare Expansion") +
theme(panel.background=element_blank())
runApp()
runApp()
medicaid <- health_insurance_coverage$expansion
uninsured_2015_stripped <- as.numeric(str_trim(
str_remove(health_insurance_coverage$uninsured_2015, "%")))
df <- data.frame(uninsured_2015_stripped, medicaid) %>%
filter(medicaid == "True" | medicaid == "False") %>%
group_by(medicaid) %>%
summarise(uninsured=mean(uninsured_2015_stripped))
ggplot(data=df, aes(x=uninsured, y=medicaid)) +
geom_col(fill="cornflowerblue", width=0.5) +
labs(title="Medicaid Expansion vs. Percent Uninsured",
y="Medicaid Expansion", x="Uninsured in 2015 (%)")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot_usmap(data=map_data, values = "expansion", regions = "states") +
scale_fill_discrete(name="Medicaid Expansion") +
theme(legend.position = "left") +
labs(title = "Medicaid Expansion") +
theme(panel.background=element_blank())
runApp()
runApp()
runApp()
runApp()
